evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload
plug "andreyorst/fzf.kak" %{
    map global normal <c-p> ': fzf-mode<ret>'
}
plug "andreyorst/smarttab.kak"

plug "harryoooooooooo/src-outline.kak" %{
    map global user o ': src-outline<ret>' -docstring 'outline'
}

plug "kak-lsp/kak-lsp" %{
    map global normal <c-r> ': lsp-disable;lsp-enable<ret>'

    map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
    map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
    map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
    map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
    map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
    map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
    map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'
} do %{
    cargo install --locked --force --path .
}

# Uncomment this section to debug kak-lsp
# eval %sh{kak-lsp --kakoune -s $kak_session}  # Not needed if you load it with plug.kak.
# set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
# lsp-enable
# map global normal <c-r> ': lsp-disable;lsp-enable<ret>'
# map global user l %{:enter-user-mode lsp<ret>} -docstring "LSP mode"
# map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring 'Select next snippet placeholder'
# map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
# map global object <a-a> '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
# map global object e '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
# map global object k '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'
# map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>' -docstring 'LSP errors and warnings'
# map global object D '<a-semicolon>lsp-diagnostic-object<ret>' -docstring 'LSP errors'

plug 'jordan-yee/kakoune-git-mode' %{
    # Set structured commit message options here
    # set-option global git_mode_use_structured_quick_commit true
    # set-option git_mode_commit_prefixes 'feat::fix::docs::refactor::build::test::style::BREAKING CHANGE::'
    # set-option git_mode_branch_label_regex 'SCRUM-[0-9]+'

    # Declare git mode with default set of mappings
    declare-git-mode

    # Suggested user mode mapping
    map global user g ': enter-user-mode git<ret>' -docstring "git mode"
}

plug 'delapouite/kakoune-buffers' %{
    map global user b ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global user B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
    map global buffers b ': pick-buffers<ret>' -docstring 'info'
}

# Some key mappings
map global goto ] '<esc>: ctags-search<ret>' -docstring 'ctags search'
map global goto s '<esc>: diff-jump<ret>' -docstring 'diff jump'
map global user c ': comment-line<ret>' -docstring 'comment line'

# Run git show-diff when openning or saving a file
hook global BufWritePost .* %{ git show-diff }
hook global BufCreate .* %{ git show-diff }

# Theme
# colorscheme kaleidoscope-dark
colorscheme gruvbox-dark
set-option global ui_options terminal_assistant=cat

# Split command opens a new window to the current buffer and line number
# Note: this splits in the same direction as vim vsplit
define-command split -params .. -docstring '
split [<commands>]: create a new Kakoune client
The ''terminal'' alias is being used to determine the user''s preferred terminal emulator
The optional arguments are passed as commands to the new client' \
%{
    terminal kak -c %val{session} -e "buffer %val{buffile}; exec %val{cursor_line}g; %arg{@}"
}
complete-command -menu split command
alias global sp split
map global user h ': split<ret>' -docstring 'horizontal split'

# Vertical split command
# Note: this splits in the same direction as vim split
define-command vsplit -params .. -docstring '
vsplit [<commands>]: split the current tmux window vertically and create a new Kakoune client
The optional arguments are passed as commands to the new client' \
%{
    tmux-terminal-vertical kak -c %val{session} -e "buffer %val{buffile}; exec %val{cursor_line}g; %arg{@}"
}
complete-command -menu split command
alias global vs vsplit
map global user v ': vsplit<ret>' -docstring 'vertical split'

# Go specific
hook global WinSetOption filetype=go %{
    define-command gofmt -docstring '
    Run gofmt on the file associated with the current buffer.' \
    %{
        echo %sh{ gofmt -w $kak_buffile }
    }
    # map global user f ':echo %sh{ gofmt -w $kak_buffile; goimports -w $kak_buffile }<ret>' -docstring 'Go Format'
}
hook global BufWritePost .*\.go %{ echo %sh{ gofmt -w $kak_buffile; goimports -w $kak_buffile } }

# Options for when the X11 module loads
hook global ModuleLoaded x11 %{
    set global termcmd %sh{
        for termcmd in \
                       'sakura         -x      ' \
                       'alacritty      -e sh -c' \
                       'kitty             sh -c' \
                       'termite        -e      ' \
                       'urxvt          -e sh -c' \
                       'rxvt           -e sh -c' \
                       'st             -e sh -c' \
                       'xterm          -e sh -c' \
                       'roxterm        -e sh -c' \
                       'mintty         -e sh -c' \
                       'gnome-terminal -e      ' \
                       'xfce4-terminal -x sh -c' \
                       'konsole        -e      '; do
            terminal=${termcmd%% *}
            if command -v $terminal >/dev/null 2>&1; then
                printf %s\\n "$termcmd"
                exit
            fi
        done
    }
}

# Add spell mode
declare-user-mode spell
map global user s ': enter-user-mode spell<ret>' -docstring 'spell'
map global user S ': enter-user-mode -lock spell<ret>' -docstring 'spell (lock)'
map global spell s ': spell<ret>' -docstring 'activate spell checking'
map global spell n ': spell-next<ret>' -docstring 'go to next spelling error'
map global spell r ': spell-replace<ret>' -docstring 'suggest replacement for selected word'
map global spell a ': spell-add<ret>' -docstring 'add selected word to the dictionary'
map global spell q ': spell-clear<ret>' -docstring 'turn off spell checking'

# Softwrap long lines
add-highlighter global/ wrap -word -indent

# Highlight TODO, FIXME, XXX, NOTE
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb

# Display line numbers
add-highlighter global/ number-lines -hlcursor

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error
