
[language-server.lsp-ai]
command = "lsp-ai"

[language-server.lsp-ai.config.memory]
file_store = { }

[language-server.lsp-ai.config.models.model1]
type = "ollama"
model = "qwen2.5-coder"

[[language-server.lsp-ai.config.chat]]
trigger = "!C"
action_display_name = "Chat"
model = "model1"

[language-server.lsp-ai.config.chat.parameters]
max_context = 8192
# max_tokens = 1024
system = "You are a code assistant chatbot. The user will ask you for assistance coding and you will do you best to answer succinctly and accurately"

[language-server.lsp-ai.config.completion]
model = "model1"

[language-server.lsp-ai.config.completion.parameters]
# max_tokens = 32
max_context = 8192

## Configure the messages per your needs
[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "system"
content = "Instructions:\n- You are an AI programming assistant.\n- Given a piece of code with the cursor location marked by \"<CURSOR>\", replace \"<CURSOR>\" with the correct code or comment.\n- First, think step-by-step.\n- Describe your plan for what to build in pseudocode, written out in great detail.\n- Then output the code replacing the \"<CURSOR>\"\n- Ensure that your completion fits within the language context of the provided code snippet (e.g., Python, JavaScript, Rust).\n\nRules:\n- Only respond with code or comments.\n- Only replace \"<CURSOR>\"; do not include any previously written code.\n- Never include \"<CURSOR>\" in your response\n- If the cursor is within a comment, complete the comment meaningfully.\n- Handle ambiguous cases by providing the most contextually appropriate completion.\n- Be consistent with your responses."

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "def greet(name):\n    print(f\"Hello, {<CURSOR>}\")"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "name"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "function sum(a, b) {\n    return a + <CURSOR>;\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "fn multiply(a: i32, b: i32) -> i32 {\n    a * <CURSOR>\n}"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# <CURSOR>\ndef add(a, b):\n    return a + b"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "Adds two numbers"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "# This function checks if a number is even\n<CURSOR>"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "assistant"
content = "def is_even(n):\n    return n % 2 == 0"

[[language-server.lsp-ai.config.completion.parameters.messages]]
role = "user"
content = "{CODE}"

# ltex language server also works with markdown and includes spell checking
[language-server.ltex-ls]
command = "ltex-ls"

# Markdown personal knowledge management system as a LSP
[language-server.markdown-oxide]
command = "markdown-oxide"

# AI coding assistant
[language-server.tabby]
command = "npx"
args = ["tabby-agent", "--lsp", "--stdio"]

# Adding typos-lsp language server for spell checking
[language-server.typos-lsp]
command = "typos-lsp"

[[language]]
name = "bash"
language-servers = [ "bash-language-server", "typos-lsp" ]

[[language]]
name = "c"
language-servers = [ "clangd", "typos-lsp", "tabby" ]

[[language]]
name = "cpp"
language-servers = [ "clangd", "typos-lsp", "tabby" ]

[[language]]
name = "jinja"
language-servers = [ "typos-lsp" ]

[[language]]
name = "markdown"
language-servers = [ "marksman", "ltex-ls", "markdown-oxide" ]

[[language]]
name = "python"
language-servers = [ "ruff", "jedi-language-server", "pylsp", "typos-lsp", "tabby" ]

[[language]]
name = "rust"
language-servers = [ "rust-analyzer", "typos-lsp", "lsp-ai" ]

[[language]]
name = "toml"
language-servers = [ "taplo", "typos-lsp" ]

[[language]]
name = "xml"
language-servers = [ "typos-lsp" ]

#================ Experimental =============#

[language-server.erg-lsp]
command = "erg"
args = ["server"]

[[language]]
name = "erg"
scope = "source.erg"
file-types = ["er"]
shebangs = ["erg"]
comment-tokens = "#"
block-comment-tokens = { start = "'''", end = "'''" }
indent = { tab-width = 4, unit = "    " }
language-servers = [ "erg-lsp" ]

[language-server.roc-ls]
command = "roc_language_server"

[[language]]
name = "roc"
scope = "source.roc"
injection-regex = "roc"
file-types = ["roc"]
shebangs = ["roc"]
roots = []
comment-token = "#"
language-servers = ["roc-ls"]
indent = { tab-width = 2, unit = "  " }
auto-format = true
formatter = { command = "roc", args =[ "format", "--stdin", "--stdout"]}


[language.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
[[grammar]]

name = "roc"
source = { git = "https://github.com/faldor20/tree-sitter-roc.git", rev = "0b1afe88161cbd81f5ddea1bb4fa786314ed49a7" }

